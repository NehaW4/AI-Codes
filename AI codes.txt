1.Prims
#prims minimal spanning tree
import sys
def minKey(key,mstSet):
    min_val = sys.maxsize
    for v in range(S):
        if key[v] < min_val and not mstSet[v]:
            min_val = key[v]
            min_index = v
    return min_index
   
def primMST(graph):
    # create 3 lists
    key = [sys.maxsize]*S
    mstSet = [False]*S
    parent = [None]*S

    key[0] = 0
    parent[0] = -1

    for _ in range(S):
        u = minKey(key,mstSet)
        mstSet[u] = True
        for v in range(S):
            if graph[u][v] >0 and not mstSet[v] and key[v] > graph[u][v]:
                key[v] = graph[u][v]
                parent[v] = u

    print(" Edge \tWeight")
    for i in range(1,S):
        print(parent[i],i,"\t" ,graph[i][parent[i]])        

graph = [
    [0,2,0,6,0],
    [2,0,3,8,5],
    [0,3,0,0,7],
    [6,8,0,0,9],
    [0,5,7,9,0]
]
S = len(graph)
primMST(graph)
 

2.Graph Coloring
import heapq
 
def is_safe(graph,color,v,c):
    for i in range(len(graph)):
        if graph[v][i] == 1 and color[i] == c:
            return False
    return True
 
def g_c_backt(graph,color_set):
    color = [None]*len(graph)
    g_c_util_backt(graph,color_set,color,0)
    for i,c in enumerate(color):
        print("vertex : ",i," color : ",c)
 
def g_c_util_backt(graph,color_set,color,v):
    if v == len(graph):
        return True
    for c in color_set:
        if is_safe(graph,color,v,c):
            color[v] = c
            if g_c_util_backt(graph,color_set,color,v+1):
                return True
            color[v] = None
 
def g_c_bnb(graph,color_set):
    def bound(v):
        max_used_color = max(color[:v]) if v>0 else 0
        return max_used_color
    def g_c():
        pq = [(0,[-1]*len(graph))]
        while pq:
            used_colors,coloring = heapq.heappop(pq)
            v = coloring.index(-1) if -1 in coloring else len(graph)
            if v == len(graph):
                return coloring
            for c in color_set:
                if is_safe(graph,coloring,v,c):
                    new_coloring = list(coloring)
                    new_coloring[v] = c
                    heapq.heappush(pq,(used_colors+1,new_coloring))
    coloring = g_c()
    for i,c in enumerate(coloring):
        print("Vertex : ",i, " color : ",c )
 
def main():
    vertices = int(input("Enter no of vertices : "))
    graph = []
    print("Enter adjacency matrix : ")
    for _ in range(vertices):
        row = [int(x) for x in input().split()]
        graph.append(row)
 
    print("Backtracking")
    color_set = input("Enter colours separated by space : ").split()
    g_c_backt(graph,color_set)
    print("Branch and Bound")
    color_set = input("Enter colours separated by space : ").split()
    g_c_bnb(graph,color_set)
 
main()
 

Enter no of vertices : 4
Enter adjacency matrix :
0 1 1 1
1 0 1 0
1 1 0 1
1 0 1 0
Backtracking
Enter colours separated by space : Red Blue Green
Branch and Bound
Enter colours separated by space : Red Blue Green
 

3.Dijkstra's 
import heapq
 
def dij(graph,src):
    distances = {node : float('inf') for node in graph}
    distances[src] = 0
    
    unv_node = list(graph.keys())
    while unv_node:
        curr_node = min(unv_node,key = lambda node:distances[node])
        unv_node.remove(curr_node)
        for v,weight in graph[curr_node].items():
            distance = distances[curr_node]+weight
            if distance<distances[v]:
                distances[v] = distance
    return distances
        
graph = {
    'A' : {'B':7,'C':9,'F':14},
    'B' : {'A':7,'C':10,'D':15},
    'C' : {'A':9,'B':10,'D':11,'F':2},
    'D' : {'B':15,'C':11,'E':6},
    'E' : {'D':6,'F':9},
    'F' : {'A':14,'C':2,'E':9},
}
mst = dij(graph,'A')
print(mst)
 

4.Kruskals
def find(parent,vertex):
    if parent[vertex] != vertex:
        parent[vertex] = find(parent,parent[vertex])
    return parent[vertex]
 
def union(parent , rank , v1 , v2):
    root1 = find(parent,v1)
    root2 = find(parent,v2)
    if root1!=root2:
        if rank[root1] > rank[root2]:
            parent[root2] = root1
        else:
            parent[root1] = root2
            if rank[root1] == rank[root2]:
                rank[root2] += 1
 
def make_set(parent,rank,vertex):
    parent[vertex] = vertex
    rank[vertex] = 0
 
def kruskal(graph):
    parent = {}
    rank = {}
    mst = []
    edges = []
    global t_weight
    t_weight = 0
    for u in graph:
        for v,weight in graph[u].items():
            edges.append((weight,u,v))
    edges.sort()
 
    for vertex in graph:
        make_set(parent,rank,vertex)
    for weight,u,v in edges:
        if find(parent,u) != find (parent,v):
            union(parent,rank,u,v)
            mst.append((u,v,weight))
            t_weight += weight
    return mst
 
def take_input():
    graph = {}
    for _ in range(int(input("Enter no of edges : "))):
        u,v,w = input("Enter edge : source destination weight ").split()
        w = int(w)
        if u not in graph:
            graph[u] = {}
        graph[u][v] = w
        if v not in graph:
            graph[v] = {}
        graph[v][u] = w
    return graph
 
graph = take_input()
mst = kruskal(graph)
print(mst)
print(f"total weight is {t_weight}")
 

#Enter no of edges : 3
#Enter edge : source destination weight A B 2
#Enter edge : source destination weight A C 3
#Enter edge : source destination weight B C 1
 

5.DFS_BFS
#dfs
graph = {
    'A' : ['E' , 'B'],
    'B' : ['C' , 'D' , 'A'],
    'C' : ['E' , 'D'],
    'D' : ['C' , 'B'],
    'E' : ['A', 'C']
}
visited = set()

def dfs (visited , graph , s):
    if s not in visited:
        print(s)
        visited.add(s)
       
        for child in graph[s]:
                dfs(visited , graph , child)       
print('dfs:')            
dfs(visited , graph , 'A')

#bfs
vis =[]
queue = []

def bfs(vis , graph , s):
    vis.append(s)
    queue.append(s)
   
    while queue :
        element = queue.pop(0)
        print(element)
       
        for child in graph[element]:
            if child not in vis:
                vis.append(child)
                queue.append(child)            
print('bfs:')            
bfs(vis , graph , 'A')
 

6.Job_scheduling

jobs = [(2,100),(1,19),(2,27),(3,15)]

#sort them
jobs.sort(key = lambda x: x[1] , reverse = True)

#find max_deadline
max_deadline = max(job[0] for job in jobs)

#using max_deadline write result
result = [-1]*max_deadline

#iteration
for job in jobs:
    deadline,profit = job
    for i in range(deadline-1,-1,-1):
        if result[i] == -1:
            result[i] = profit
            break
       
total_profit = sum(result)
print("Jobs sequence : ",result)
print("Total profit : ",total_profit)
 

7.Selection_sort
array1 = [16,19,12,45,13,1,2,4,9]
for i in  range(len(array1)):
    min_idx = i
    for j in range(i+1,len(array1)):
        if array1[min_idx]>array1[j]:
            min_idx = j
    array1[i],array1[min_idx] = array1[min_idx],array1[i]
print(array1)
 

8.Chatbot
import random

responses = {
    "hi": "Hello!",
    "how are you": "I'm good, thank you!",
    "bye": "Goodbye!",
    "default": "I'm sorry, I don't understand."
}
while True:
    user_input = input("You: ").lower()
    print("Chatbot:", responses.get(user_input, responses["default"]))
    if user_input == "bye":
        break
 

9.A*Star
 

global g
g=0
def print_board(elements):
    for i in range(9):
        if i%3 == 0:
            print()
        if elements[i]==-1:
            print("_", end = " ")
        else:
            print(elements[i], end = " ")
    print()

def solvable(start):
    inv=0

    for i in range(9):
        if start[i] <= 1:
            continue
        for j in range(i+1,9):
            if start[j]==-1:
                continue
            if start[i]>start[j]:
                inv+=1
    if inv%2==0:
        return True
    return False

def heuristic(start,goal):
    global g
    h = 0
    for i in range(9):
        for j in range(9):
            if start[i] == goal[j] and start[i] != -1:
                h += (abs(j-i))//3 + (abs(j-i))%3
    return h + g

def moveleft(start,position):
    start[position],start[position-1]= start[position-1],start[position]

def moveright(start,position):
    start[position],start[position+1]= start[position+1],start[position]

def moveup(start,position):
    start[position],start[position-3]= start[position-3],start[position]

def movedown(start,position):
    start[position],start[position+3]= start[position+3],start[position]


def movetile(start,goal):
    emptyat = start.index(-1)
    row = emptyat//3
    col = emptyat%3

    t1,t2,t3,t4 = start[:],start[:],start[:],start[:]
    f1,f2,f3,f4 = 100,100,100,100

    if col-1 >= 0:
        moveleft(t1, emptyat)
        f1 = heuristic(t1, goal)
    if col+1 < 3:
        moveright(t2, emptyat)
        f2 = heuristic(t2, goal)
    if row + 1 < 3:
        movedown(t3, emptyat)
        f3 = heuristic(t3, goal)
    if row-1 >= 0 :
        moveup(t4, emptyat)
        f4 = heuristic(t4, goal)
   
   
    min_heuristic = min(f1, f2, f3, f4)

    if f1==min_heuristic:
        moveleft(start, emptyat)
    elif f2==min_heuristic:
        moveright(start, emptyat)
    elif f3==min_heuristic:
        movedown(start, emptyat)
    elif f4 == min_heuristic:
        moveup(start, emptyat)
       
       
def solveEight(start,goal):
    global g
    g+=1
    movetile(start,goal)
    print_board(start)
    f = heuristic(start,goal)
    print(f"f(n): {f}")
    if f == g:
        print(f"\nSolved in {f} moves")
        return
    solveEight(start,goal)

start = list()
goal = list()
print("Enter the start state:(Enter -1 for empty):")
for i in range(9):
    start.append(int(input()))
print("Enter the goal state:(Enter -1 for empty):")
for i in range(9):
    goal.append(int(input()))


print('Start state')
print_board(start)
print("----------------------------------------------- ")

if solvable(start):
    solveEight(start,goal)
else:
    print("Not possible to solve")

"""Enter the start state:(Enter -1 for empty):
1
2
3
-1
4
6
7
5
8
Enter the goal state:(Enter -1 for empty):
1
2
3
4
5
6
7
8
-1
Start state

1 2 3
_ 4 6
7 5 8
-----------------------------------------------

1 2 3
4 _ 6
7 5 8
f(n) = 3

1 2 3
4 5 6
7 _ 8
f(n) = 3

1 2 3
4 5 6
7 8 _
f(n) = 3

Solved in 3 moves """
